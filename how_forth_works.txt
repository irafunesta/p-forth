dictionary is a linked list
Link | name | flags | implementation | NEXT
link -> pointer to the previous entry in the dictionary
name -> name of the word
flags -> various flags
implementation -> list of pointer to other function or integrated operation that compose the word implementation
NEXT -> specific word that make the program move to the next word

each definition starts with DOCOL, or a codname that start the chain, by setting the isp pointer

so we need a stack
a pointer to the top of the stack

the dictionary is a linked list
we have a pointer to the latest entry, when we declare a word, we add it to the end
the first value of the word entry, is the pointer to the latest entry

when we compile (add a new word) the implementation is a pointer to the start of that word.
each entry at the end will have NEXT

NEXT
    restore the isp

DOCOL
    push the current isp to the return stack
    call next instruction

eg.

QUADRUPLE 
    DOCOL
    DOUBLE -------+-> codname -> DOCOL
                  |   DUP   ----------> codname -> DOCOL NATIVE NEXT
                  |   NEXT
    DOUBLE -------+
    NEXT

the push of the isp on the return stack is at the start of the function, not at the end
so i save where i was , not where i want to go, and with next i simply go back

IF and branching
0 1           2 3  4  5  6 7    8  9 10   11
: is-it-zero? 0 0= if 33 . else 44 . then ;
                  
                if -> cond jump, can i use the jump to set a global var to jump, then skip the words in the middle
                if -> jump_num swap ?branch 33 . 

                s -> 1 7 10 rot 
                s -> 7 10 1 ?branch

                if = cond + jump to else or then
                else = jump to then (never execute it)

{'link': 24, 'name': 'is-zero', 'flags': 0, 'code': [
    {'ptr': 9, 'f': None, 'lit': None},     -> 0=
    {'ptr': None, 'f': None, 'lit': 4},     -> relative jump 4
    {'ptr': 24, 'f': None, 'lit': None},    -> ?branch
    {'ptr': None, 'f': None, 'lit': 22},    -> 22
    {'ptr': None, 'f': None, 'lit': 6},     -> 6
    {'ptr': 23, 'f': None, 'lit': None},    -> branch
    {'ptr': None, 'f': None, 'lit': 33}]}   -> 33

: is-zero 0= if 22 else 33 then ;

{'link': 24, 'name': 'is-zero', 'flags': 0, 'code': [
    {'ptr': 9, 'f': None, 'lit': None}, 
    {'ptr': None, 'f': None, 'lit': 3}, 
    {'ptr': 24, 'f': None, 'lit': None}, 
    {'ptr': None, 'f': None, 'lit': 22}, 
    {'ptr': None, 'f': None, 'lit': 3}, 
    {'ptr': 23, 'f': None, 'lit': None}, 
    {'ptr': None, 'f': None, 'lit': 33}]}


0= if
    -> 0 : Non saltare l'if -> jump flag a False
    -> 1 : Salta l'if

5 5 == if
    -> 5 5 : Non saltare l'if
    -> 5 3 : Salta l'if
  
: buzz ." print buzz string " ;


Testing loop
: loop-test  10 0 do i . loop ;
loop-test

Objective 
: fizz?  3 mod 0 = dup if ." Fizz " then ;
: buzz?  5 mod 0 = dup if ." Buzz " then ;
: fizz-buzz?  dup fizz? swap buzz? or invert ;
: do-fizz-buzz  25 1 do cr i fizz-buzz? if i . then loop ;
do-fizz-buzz

{'link': 35, 'name': 'fizz?', 'flags': 0, 'code': [
    {'ptr': None, 'f': None, 'lit': 3, 'str': ''}, -> 3
    {'ptr': 24, 'f': None, 'lit': None, 'str': ''}, -> mod
    {'ptr': 9, 'f': None, 'lit': None, 'str': ''}, -> 0=
    {'ptr': 16, 'f': None, 'lit': None, 'str': ''}, -> dup
    {'ptr': None, 'f': None, 'lit': 4, 'str': None}, -> 4
    {'ptr': 26, 'f': None, 'lit': None, 'str': None}, -> ?branch
    {'ptr': None, 'f': None, 'lit': None, 'str': 'Fizz '}]} -> str Fizz